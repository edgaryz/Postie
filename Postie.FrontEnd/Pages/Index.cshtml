@page
@using Postie.Core.Models
@using Postie.Core.Contracts;
@model Postie.FrontEnd.Pages.IndexModel
@{
    ViewData["Title"] = "Home page";
    Layout = "Shared/_Layout";
}

<div class="header-text">
    <h1></h1>
</div>


<div class="post-form">
    <div class="post-text">
        Make a Post!
    </div>
    <form action="#" class="custom-form" id="createPostForm">
        <div class="form-row">
            <div class="input-data">
                <input type="text" id="name" name="name" required>
                <div class="underline"></div>
                <label for="">Name</label>
            </div>
            <div class="input-data">
                <input type="email" id="email" name="email" required>
                <div class="underline"></div>
                <label for="">Email Address</label>
            </div>
        </div>
        <div class="form-row">
            <div class="input-data">
                <input type="text" id="title" name="title" required>
                <div class="underline"></div>
                <label for="">Title</label>
            </div>
        </div>
        <div class="form-row">
            <div class="input-data textarea">
                <textarea rows="8" cols="80" id="content" name="content" required></textarea>
                <br />
                <div class="underline"></div>
                <label for="">Write your message</label>
                <br />
                <div class="form-row submit-btn">
                    <div class="input-data">
                        <div class="inner"></div>
                        <input type="submit" value="submit">
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<div class="search">
    <div class="row">
        <div class="col">
            <div>
                <div class="search-2">
                    <i class="bx bxs-map"></i>
                    <input type="text" id="search-bar" placeholder="Enter title or message" />
                    <button id="search-button">Search</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="status-message">Loading posts...</div>
<div class="list-group"></div>
<div id="status-message">Loading posts...</div>


<script>
    let pageNumber = 1;
    const pageSize = 5;
    let totalPostsCount = 0;
    let loadedPostsCount = 0;
    const listGroup = document.querySelector(".list-group");
    const statusMessage = document.querySelector("#status-message");

    async function loadPosts(query = '') {
        try {
            const response = await fetch(
                `https://localhost:7019/GetPosts?pageNumber=${pageNumber}&pageSize=${pageSize}&query=${encodeURIComponent(query)}`,
                {
                    method: "GET",
                    headers: {
                        Accept: "application/json",
                    },
                }
            );

            if (!response.ok) {
                throw new Error("Failed to fetch posts.");
            }

            const data = await response.json();
            const posts = data.posts;
            totalPostsCount = data.totalCount;

            if (pageNumber === 1) {
                listGroup.innerHTML = ""; // Clear previous posts on initial load
            }

            if (posts.length === 0 && pageNumber === 1) {
                listGroup.innerHTML = `<p>It's lonely here...</p>`;
                return;
            }

            posts.forEach((post) => {
                const postElement = document.createElement("span");
                postElement.className =
                    "list-group-item list-group-item-action flex-column align-items-start list-item-custom";
                postElement.innerHTML = `
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">${post.user.name}</h5>
                            <h5 class="mb-1">${post.title}</h5>
                            <small>${new Date(post.creationDate).toLocaleDateString()}</small>
                        </div>
                        <p class="mb-1">${post.content}</p>
                    `;

                listGroup.appendChild(postElement);
            });

            loadedPostsCount += posts.length;
            statusMessage.innerHTML = `Loaded ${loadedPostsCount} of ${totalPostsCount} posts`;

            if (loadedPostsCount >= totalPostsCount) {
                statusMessage.innerHTML = "All posts loaded.";
                window.removeEventListener("scroll", onScroll); // Remove scroll event listener if all posts are loaded
            }
        } catch (error) {
            console.error("Error during posts loading: ", error);
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        loadPosts(); // Load the initial set of posts

        document.getElementById("search-button").addEventListener("click", () => {
            const query = document.getElementById("search-bar").value.trim();
            pageNumber = 1; // Reset page number for new search
            loadedPostsCount = 0; // Reset loaded posts count
            statusMessage.innerHTML = "Loading posts...";
            loadPosts(query); // Load posts based on search query
        });

        window.addEventListener("scroll", onScroll);
    });

    function onScroll() {
        if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight) {
            pageNumber++;
            loadPosts(document.getElementById("search-bar").value.trim());
        }-
    }

    function sendPostData(endpoint, formData, method = "POST") {
        const dateNow = new Date();
        const formattedDate = dateNow.toISOString().split("T")[0];
        const postData = {
            title: formData.get("title"),
            content: formData.get("content"),
            creationDate: formattedDate,
            user: {
                name: formData.get("name"),
                email: formData.get("email"),
            },
        };

        console.log(postData);

        const jsonString = JSON.stringify(postData);

        fetch(endpoint, {
            method: method,
            body: jsonString,
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
            },
        })
            .then((response) => {
                if (!response.ok) {
                    return response.json().then((err) => {
                        throw new Error(
                            "Server error: " + (err.Message || response.statusText)
                        );
                    });
                }
                return response.json();
            })
            .then((data) => {
                console.log("Success:", data);
                alert("Post successfully created!");
                window.location.href = "/Index";
            })
            .catch((error) => {
                console.error("Problem with fetch operation: ", error.message);
            });
    }

    document
        .getElementById("createPostForm")
        .addEventListener("submit", function (event) {
            event.preventDefault();
            const endpoint = "https://localhost:7019/CreatePost";
            const formData = new FormData(this);
            sendPostData(endpoint, formData);
        });
</script>